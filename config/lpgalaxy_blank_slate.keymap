/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
#define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define FNC_L 1
#define NUM_L 2
#define NAV_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
    };

    tap_dances {
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
      compatible = "zmk,conditional-layers";
      tri {
        if-layers = <FNC_L NUM_L>;
        then-layer = <NAV_L>;
      };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
 &kp ESC       &kp Q       &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &mt LCTL TAB  &kp A       &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &mt RCTL QUOT
 &kp LSHFT     &kp Z       &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &mt LSHFT RET
#else
#endif
#ifdef TBLE_DUAL_2U
 &kp LATL   &kp LGUI    &none   &mo NUM_L         &shifty                        &kp SPACE                &mo FNC_L   &kp LALT   &kp RGUI      &kp RSHIFT
#elif defined(TBLE_MIT)
 &kp LALT   &kp LGUI    &none   &none       &mo NUM_L            &kp SPACE                 &mo FNC_L      &kp LEFT    &kp DOWN   &kp UP        &kp RIGHT
#else                               
 &kp LALT   &kp LGUI    &none   &none       &mo NUM_L      &kp SPACE      &kp RET          &mo FNC_L      &kp LEFT    &kp DOWN   &kp UP        &kp RIGHT
#endif
            >;
        };

        fnc_layer {
            label = "Fnc";
            bindings = <
 &kp GRAVE  &kp N1     &kp N2     &kp N3       &kp N4          &kp N5         &kp N6           &kp N7         &kp N8      &kp N9       &trans      &kp DEL
 &trans     &kp F1     &kp F2     &kp F3       &kp F4          &kp F5         &kp LEFT         &kp DOWN       &kp UP      &kp RIGHT    &kp RET     &trans
 &trans     &kp F6     &none      &kp K_APP    &kp PSCRN       &none          &kp LC(LA(N))    &kp C_MUTE     &kp C_VOL_DN &kp C_VOL_UP &kp C_PLAY &trans
#ifdef TBLE_DUAL_2U
 &trans     &trans     &trans     &trans              &trans                        &trans                    &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#elif defined(TBLE_MIT)
 &trans     &trans     &trans     &trans       &trans                &trans                    &trans         &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#else
 &trans     &trans     &trans     &trans       &trans          &trans         &trans           &trans         &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#endif
            >;
        };


        num_layer {
            label = "Num";
            bindings = <
 &kp GRAVE  &kp N1     &kp N2     &kp N3       &kp N4          &kp N5         &kp N6           &kp N7         &kp N8      &kp N9       &trans      &trans
 &trans     &trans     &trans     &trans       &trans          &trans         &trans           &kp N4         &kp N5      &kp N6       &trans      &trans
 &trans     &trans     &trans     &trans       &trans          &trans         &kp LC(LA(N))    &kp N1         &kp N2      &kp N3       &trans      &trans
#ifdef TBLE_DUAL_2U
 &trans     &trans     &trans     &trans              &trans                        &trans                    &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#elif defined(TBLE_MIT)
 &trans     &trans     &trans     &trans       &trans                &trans                    &kp N0         &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#else
 &trans     &trans     &trans     &trans       &trans          &trans         &trans           &kp N0         &kp MINUS   &kp PLUS     &kp LBKT    &kp RBKT
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
 &trans     &bootloader &bt BT(0)  &bt BT(1)   &bt BT(2)       &bt BT(3)      &bt BT(4)        &bt BT_CLR     &trans      &trans       &trans      &trans
 &trans     &kp F7      &kp F8     &kp F9      &kp F10         &kp F11        &kp HOME         &kp PG_DN      &kp PG_UP   &kp END      &trans      &trans
 &trans     &kp F12     &none      &none       &none           &none          &trans           &trans         &trans      &trans       &trans      &trans
#ifdef TBLE_DUAL_2U
 &trans     &trans      &trans     &trans            &trans                         &trans                   &trans      &trans     &trans        &trans
#elif defined(TBLE_MIT)
 &trans     &trans      &trans     &trans      &trans               &trans                    &trans         &trans      &trans     &trans        &trans
#else
 &trans     &trans      &trans     &trans      &trans          &trans        &trans           &trans         &trans      &trans     &trans        &trans
#endif
            >;
        };

    };
};
